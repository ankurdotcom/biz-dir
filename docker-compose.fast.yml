version: '3.8'

services:
  # Core Services Only (for faster development)
  
  # Database Service - MySQL 8.0
  db:
    image: mysql:8.0
    container_name: bizdir_database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-bizdir_root_2025!}
      MYSQL_DATABASE: ${DB_NAME:-bizdir_production}
      MYSQL_USER: ${DB_USER:-bizdir_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-bizdir_secure_2025!}
    volumes:
      - db_data:/var/lib/mysql
      - ./mvp/config/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./mvp/config/monetization_schema.sql:/docker-entrypoint-initdb.d/02-monetization.sql
      - ./mvp/config/analytics_schema.sql:/docker-entrypoint-initdb.d/03-analytics.sql
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - bizdir_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: bizdir_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-bizdir_redis_2025!}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bizdir_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 3
      interval: 30s

  # PHP-FPM Service (Optimized)
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.optimized
      target: production
    container_name: bizdir_php
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PHP_ENV=${APP_ENV:-production}
      - WP_ENV=${APP_ENV:-production}
    volumes:
      - ./mvp:/var/www/html
      - wp_uploads:/var/www/html/wp-content/uploads
    networks:
      - bizdir_network

  # Nginx Web Server (Lightweight)
  nginx:
    image: nginx:1.25-alpine
    container_name: bizdir_nginx
    restart: unless-stopped
    depends_on:
      - php
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./mvp:/var/www/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - wp_uploads:/var/www/html/wp-content/uploads:ro
    networks:
      - bizdir_network

  # Optional Services (Profiles for selective enabling)
  
  # Elasticsearch for Advanced Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: bizdir_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - bizdir_network
    profiles:
      - full
      - search

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bizdir_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - bizdir_network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bizdir_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bizdir_network
    profiles:
      - monitoring

volumes:
  db_data:
  redis_data:
  wp_uploads:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  bizdir_network:
    driver: bridge
